declare name        "MathsLib";
declare version     "1.1";
declare author      "Sam Pluta";
declare license     "BSD";
declare copyright   "(c)Sam Pluta 2020";

import("stdfaust.lib");



MathsC(riseDur, fallDur, logExp, onOff) = 1-sigOutInv, logExp:calcLogExp, endTrig, topTrig: _,_,_
with {
  riseDurB = max(0.001, riseDur);
  fallDurB = max(0.001, fallDur);
  dur = riseDurB+fallDurB;
  freq = (1/dur);

  peakHold = peakPoint:ba.sAndH(endTrig);//float(float(endTrig>0)+float(endTrig'<=0)==2.0)
  peakPoint = riseDurB/dur;

  sigOutInv = selectIt(lf_sawposTrig-peakHold);
  impulse = 1-1';
  endTrig = myTrigger(impulse + 0.5*ma.diffn(lf_sawposTrig*2-1)*onOffB)+myTrigger(onOffB);//1-sigOutInv:ba.impulsify*onOffB;

  topTrig = myTrigger(lf_sawposTrig-peakHold);

  lf_sawposTrig = ma.frac*(onOffB) ~ +(freq'/ma.SR);
  selectIt(val) = ba.if(val<0, (val/peakHold):abs, val/(1-peakHold));

  onOffB = ba.if(onOff>0, 1, 0);
};

myTrigger(x) = float(float(x>0)+float(x'<=0)==2.0);

calcLogExp(x, logExp) = ba.if(logExp<0.5, (loggy(x),x):si.interpolate(min(1,logExp*2)), (x,expy(x)):si.interpolate(max(0,logExp*2-1)))
with{
  expy(x) = (10000^x)*0.0001;//x^10;
  loggy(x) = 1-expy(1-x);
};

myImp(freq, onOff) = sigOut
  with {
    lf_saw = ma.frac*(onOffB) ~ +(freq'/ma.SR);
    onOffB = ba.if(onOff>0, 1, 0);
  sigOut = hf;//ba.if(freq>50, hf, lf);
  impulse = 1-1';
  hf = impulse + 0.5*ma.diffn(lf_saw*2-1);
  lf = ba.if(max(0,os.lf_sawpos(freq)-0.001)==0, 1, 0);
};

MathsT(riseDur, fallDur, logExp, trigger) = 1-sigOutInv:si.smooth(0.1), logExp:calcLogExp, endTrig, topTrig: _,_,_
with {
  dur = riseDur+fallDur;
  trighold(x) = x:ba.sAndH(float(float(trigger>0)+float(trigger'<=0)==2.0));
  freq = 1/dur;
  peakPoint = (riseDur/dur):trighold;

  sigOutInv = selectIt(lf_sawposTrig-peakPoint);
  endTrig = 1-sigOutInv:ba.impulsify;
  topTrig = myTrigger(lf_sawposTrig-peakPoint);

  sigChoice(in) = ba.if(in>1, 1, in);//in,1:ba.selectn(2, float(in>1));
  lf_sawposTrig = (sigChoice*(1-trigger)) ~ +(freq'/ma.SR);

  selectIt(val) = ba.if(val<0, (val/peakPoint):abs, val/(1-peakPoint));

};
